@import "./Template/variables";
@import "./Template/mixin";

.page404 {
  &-container {
    @include setup_size(100%, 85vh);
    @include flex_center(column);
  }
  &-content {
    @include setup_size(50%, auto);
    text-align: center;
    h2 {
      margin-bottom: 2.5vh;
    }
    p {
      margin-bottom: 5vh;
    }
  }
}

.page404-bg {
  display: block;
  position: absolute;
  top: 0;
  left: 0;
  object-fit: cover;
  width: 100%;
  height: 100%;
  overflow: hidden;
  z-index: 0;
}

.circle-container {
  $particleNum: 200;
  $particleColor: hsl(180, 100%, 80%);

  position: absolute;
  transform: translateY(-10vh);
  animation-iteration-count: infinite;
  animation-timing-function: linear;

  .circle {
    width: 100%;
    height: 100%;
    mix-blend-mode: screen;
    border: 0.5px solid $blue;
    opacity: 0.1;

    animation: fadein-frames 200ms infinite, scale-frames 2s infinite;

    @keyframes fade-frames {
      0% {
        opacity: 0.3;
      }

      50% {
        opacity: 0.1;
      }

      100% {
        opacity: 0.3;
      }
    }

    @keyframes scale-frames {
      0% {
        transform: scale3d(0.4, 0.4, 1);
      }

      50% {
        transform: scale3d(2.2, 2.2, 1);
      }

      100% {
        transform: scale3d(0.4, 0.4, 1);
      }
    }
  }

  $particleBaseSize: 20;

  @for $i from 1 through $particleNum {
    &:nth-child(#{$i}) {
      $circleSize: random($particleBaseSize);
      width: $circleSize + px;
      height: $circleSize + px;

      $startPositionY: random(10) + 90;
      $framesName: "move-frames-" + $i;
      $moveDuration: 28000 + random(9000) + ms;

      animation-name: #{$framesName};
      animation-duration: $moveDuration;
      animation-delay: random(37000) + ms;

      @keyframes #{$framesName} {
        from {
          transform: translate3d(
            #{random(100) + vw},
            #{$startPositionY + vh},
            0
          );
        }

        to {
          transform: translate3d(
            #{random(100) + vw},
            #{- $startPositionY - random(30) + vh},
            0
          );
        }
      }

      .circle {
        animation-delay: random(4000) + ms;
      }
    }
  }
}

@media screen and (max-width: $breakpoint-medium) {
  .circle-container {
    .circle {
      opacity: 0.25;
    }
  }
  .page404 {
    &-content {
      @include setup_size(80%, auto);
    }
  }
}
